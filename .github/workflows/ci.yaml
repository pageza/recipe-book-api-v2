name: CI Pipeline

on:
  push:      # runs whenever you push any branch
  pull_request:   # runs on all pull requests

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # If needed in your environment:
      # - name: Install Docker Compose
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install docker-compose-plugin

      - name: Build Docker images
        run: |
          docker compose -f docker-compose.ci.yml build

      - name: Start DB & run migrations
        run: |
          # Bring up ONLY 'db' + 'migrate' so we don't launch them multiple times
          docker compose -f docker-compose.ci.yml up -d db migrate

          # Let migrations finish
          sleep 5

      - name: Check running containers
        run: docker ps -a

      - name: Start API (and optionally gRPC server)
        run: |
          # Now just bring up 'api' and 'grpc-server', but NOT 'migrate' again
          docker compose -f docker-compose.ci.yml up -d api grpc-server

          # Let them come online
          sleep 5

      - name: Run Go tests
        run: |
          # This calls your "test" service which runs "go test ./..."
          docker compose -f docker-compose.ci.yml run --rm test

      - name: Run Newman E2E tests
        # If Newman fails with exit code 1, GitHub Actions normally stops. 
        # We'll still let it fail the job, but we want logs no matter what.
        run: |
          docker compose -f docker-compose.ci.yml run --rm newman

      - name: Check container status after tests
        run: docker compose -f docker-compose.ci.yml ps

      - name: Dump container logs
        if: always()     # <-- runs even if previous step fails
        run: |
          docker compose -f docker-compose.ci.yml logs

      - name: Cleanup
        if: always()     # <-- also always runs
        run: |
          docker compose -f docker-compose.ci.yml down
