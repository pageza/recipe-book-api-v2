name: CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  COMPOSE_PROJECT_NAME: recipe-book-api-v2
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  GRPC_SERVER_ADDR: grpc-server:50051

  GODEBUG: netdns=go

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      - name: Debug Docker Compose Config
        run: docker compose -f docker-compose.ci.yml config

      - name: Build Docker images
        run: docker compose -f docker-compose.ci.yml build --no-cache

      - name: Start Docker Compose (detached)
        run: docker compose -f docker-compose.ci.yml up -d db migrate

      - name: Check DB logs to ensure migrations are complete
        run: docker compose -f docker-compose.ci.yml logs migrate

      - name: Start API and gRPC Services
        run: docker compose -f docker-compose.ci.yml up -d api grpc-server

      - name: Download wait-for-it.sh script
        run: |
          curl -o wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
          chmod +x wait-for-it.sh

      - name: Wait for 'users' table
        run: |
          echo "Waiting for 'users' table in DB..."
          for i in {1..30}; do
            RESULT=$(
              docker compose -f docker-compose.ci.yml exec db \
                psql -U postgres -w -d recipe_db -t \
                  -c "SELECT to_regclass('public.users');"
            )
            echo "Attempt $i: Result: '$RESULT'"
            if [ "$RESULT" = "users" ]; then
              echo "'users' table exists."
              exit 0
            fi
            sleep 2
          done
          echo "'users' table not found after waiting."
          exit 1

      - name: List Docker Compose Services
        run: docker compose -f docker-compose.ci.yml ps

      - name: Wait for API to be Ready
        run: |
          URL="http://localhost:8080/healthcheck"
          echo "Checking API health at: $URL"
          sleep 30

          for i in {1..20}; do
            set +e
            http_output=$(curl -s --fail "$URL")
            exit_code=$?
            set -e

            if [ $exit_code -eq 0 ]; then
              echo "API responded successfully:"
              echo "$http_output"
              echo "API is ready"
              exit 0
            fi

            echo "Healthcheck attempt $i failed with curl exit code: $exit_code. Retrying..."
            sleep 5
          done

          echo "API did not become healthy in time"
          exit 1

      - name: Run Tests
        run: docker compose -f docker-compose.ci.yml run --rm test

      - name: Run E2E tests with Newman
        run: |
          for file in $(find collections/user_endpoints -name "*.postman_collection.json"); do
            docker run --rm --network host -v $(pwd):/etc/newman postman/newman run "$file" --environment collections/TestEnvironment.postman_environment.json
          done

      - name: Dump container logs
        if: always()
        run: docker compose -f docker-compose.ci.yml logs

      - name: Run integration tests with Newman
        run: |
          for file in $(find collections/user_endpoints -name "*.postman_collection.json"); do
            echo "Running Postman tests in $file"
            docker run --rm \
              --network recipe-book-api-v2_default \
              -v $(pwd):/etc/newman \
              postman/newman run "$file" \
              --environment collections/TestEnvironment.postman_environment.json
          done

      - name: Stop (and clean) Docker Compose
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v
