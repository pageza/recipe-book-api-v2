name: CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  GRPC_DIAL_ADDRESS: localhost:50051

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      # Build Docker images first.
      - name: Build Docker images
        run: docker compose build --no-cache

      # Create the external network "backend" if it doesn't exist.
      - name: Create Docker network "backend"
        run: |
          if ! docker network inspect backend > /dev/null 2>&1; then
            docker network create backend
          else
            echo "Network 'backend' already exists"
          fi

      # Start all required services.
      - name: Start Docker Compose Services
        run: docker compose up -d

      - name: List Docker Compose Services
        run: docker compose ps

      # Wait for API to be Ready (adjust URL and timing as needed).
      - name: Wait for API to be Ready
        run: |
          URL="http://localhost:8080/healthcheck"
          echo "Checking API health at: $URL"
          # Increase the initial wait time to ensure the container is up.
          sleep 30
          for i in {1..20}; do
            echo "Attempt $i: Checking if port 8080 is open..."
            if nc -z localhost 8080; then
              echo "Port 8080 is open. Now checking HTTP status..."
              status=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
              echo "HTTP status: $status"
              if [ "$status" -eq 200 ]; then
                echo "API is ready"
                exit 0
              fi
            else
              echo "Port 8080 is not open yet"
            fi
            sleep 5
          done
          echo "API did not become healthy in time"
          exit 1


      # Run Go tests.
      - name: Run Go tests
        run: go test -v ./...

      # Run additional E2E tests (using Newman) if needed.
      - name: Run all modular E2E tests with Newman
        run: |
          for file in $(find collections/user_endpoints -name "*.postman_collection.json"); do
            echo "Running tests in $file"
            docker run --rm --network recipe-book-api-v2_default -v $(pwd):/etc/newman postman/newman run "$file" --environment collections/TestEnvironment.postman_environment.json
          done

      # Dump container logs for debugging.
      - name: Dump container logs 
        if: always()
        run: docker compose logs 

      # Tear down the Docker Compose services.
      - name: Tear Down Docker Compose Services
        if: always()
        run: docker compose down
