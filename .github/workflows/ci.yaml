name: CI Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  GRPC_DIAL_ADDRESS: localhost:50051
  GODEBUG: netdns=go

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: recipe_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      - name: Build Docker images
        run: docker compose -f docker-compose.ci.full.yml build --no-cache

      - name: Run Database Migrations
        run: docker compose -f docker-compose.ci.full.yml run migrate

      - name: Start API and gRPC Services
        run: docker compose -f docker-compose.ci.full.yml up -d api grpc-server

      - name: List Docker Compose Services
        run: docker compose -f docker-compose.ci.full.yml ps
      - name: Wait for API to be Ready
        run: |
          URL="http://localhost:8080/healthcheck"
          echo "Checking API health at: $URL"
          sleep 30
          for i in {1..20}; do
            if nc -z localhost 8080; then
              status=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
              echo "HTTP status: $status"
              if [ "$status" -eq 200 ]; then
                echo "API is ready"
                exit 0
              fi
            fi
            sleep 5
          done
          echo "API did not become healthy in time"
          exit 1

      - name: Run Go tests
        env:
          DB_HOST: localhost
          GODEBUG: netdns=go
        run: go test -v ./...

      - name: Run E2E tests with Newman
        run: |
          for file in $(find collections/user_endpoints -name "*.postman_collection.json"); do
            docker run --rm --network host -v $(pwd):/etc/newman postman/newman run "$file" --environment collections/TestEnvironment.postman_environment.json
          done

      - name: Dump container logs 
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml logs

      - name: Tear Down Docker Compose Services
        if: always()
        run: docker compose -f docker-compose.ci.full.yml down -v