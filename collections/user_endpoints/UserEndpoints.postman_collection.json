{
  "info": {
    "name": "User Endpoints",
    "description": "Collection for testing user-related endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "const timestamp = new Date().getTime();",
          "pm.environment.set('uniqueUsername', 'testuser_' + timestamp);",
          "pm.environment.set('uniqueEmail', 'testuser_' + timestamp + '@example.com');",
          "pm.environment.set('uniquePassword', 'testpassword_' + timestamp);",
          "pm.environment.set('uniquePreferences', JSON.stringify({ diet: 'vegan', unique: timestamp }));"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Register User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"username\": \"{{uniqueUsername}}\",\n    \"email\": \"{{uniqueEmail}}\",\n    \"password\": \"{{uniquePassword}}\",\n    \"preferences\": {{uniquePreferences}}\n}"
        },
        "url": {
          "raw": "{{apiUrl}}/register",
          "host": [
            "{{apiUrl}}"
          ],
          "path": [
            "register"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Validate status code is 201 (Created)",
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "// Validate that Content-Type header includes 'application/json'",
              "pm.test(\"Content-Type is application/json\", function () {",
              "    var contentType = pm.response.headers.get(\"Content-Type\");",
              "    pm.expect(contentType).to.match(/application\\/json/);",
              "});",
              "",
              "// Parse response and verify expected fields",
              "var jsonData = pm.response.json();",
              "pm.test(\"Response has 'message' field\", function () {",
              "    pm.expect(jsonData).to.have.property(\"message\");",
              "});",
              "pm.test(\"Message field is 'user registered'\", function () {",
              "    pm.expect(jsonData.message).to.eql(\"user registered\");",
              "});",
              "",
              "// Store registration values for subsequent login tests",
              "pm.environment.set(\"registeredEmail\", pm.environment.get(\"uniqueEmail\"));",
              "pm.environment.set(\"registeredPassword\", pm.environment.get(\"uniquePassword\"));",
              "if (jsonData.id) {",
              "    pm.environment.set(\"registeredUserId\", jsonData.id);",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "Register Duplicate",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"username\": \"{{registeredUserId}}\",\n    \"email\": \"{{registeredEmail}}\",\n    \"password\": \"{{registeredPassword}}\",\n    \"preferences\": {}\n}"
        },
        "url": {
          "raw": "{{apiUrl}}/register",
          "host": [
            "{{apiUrl}}"
          ],
          "path": [
            "register"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Validate status code is 409 for duplicate registration",
              "pm.test(\"Status code is 409\", function () {",
              "    pm.response.to.have.status(409);",
              "});",
              "",
              "// Validate error message indicates duplicate registration",
              "var jsonData = pm.response.json();",
              "pm.test(\"Error message indicates duplicate registration\", function () {",
              "    pm.expect(jsonData.error).to.include(\"already exists\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Login User",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{registeredEmail}}\",\n    \"password\": \"{{registeredPassword}}\"\n}"
        },
        "url": {
          "raw": "{{apiUrl}}/login",
          "host": [
            "{{apiUrl}}"
          ],
          "path": [
            "login"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Validate login response status is 200",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Parse the response and ensure token exists",
              "var jsonData = pm.response.json();",
              "pm.test(\"Response has token\", function () {",
              "    pm.expect(jsonData).to.have.property(\"token\");",
              "});",
              "",
              "// Store the token for use in protected endpoint tests",
              "pm.environment.set(\"jwtToken\", jsonData.token);"
            ]
          }
        }
      ]
    },
    {
      "name": "Login Invalid Credentials",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{registeredEmail}}\",\n    \"password\": \"wrongpassword\"\n}"
        },
        "url": {
          "raw": "{{apiUrl}}/login",
          "host": [
            "{{apiUrl}}"
          ],
          "path": [
            "login"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Validate status code is 401 for invalid credentials",
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "// Parse response and validate error message",
              "var jsonData = pm.response.json();",
              "pm.test(\"Error message indicates invalid credentials\", function () {",
              "    pm.expect(jsonData.error).to.include(\"invalid credentials\");",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Register Malformed JSON",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{username: \"badjson\", email: \"badjson@example.com\""
        },
        "url": {
          "raw": "{{apiUrl}}/register",
          "host": [
            "{{apiUrl}}"
          ],
          "path": [
            "register"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Validate status code is 400 for malformed JSON",
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Login Malformed JSON",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{email: \"badjson@example.com\", password: \"badjson\""
        },
        "url": {
          "raw": "{{apiUrl}}/login",
          "host": [
            "{{apiUrl}}"
          ],
          "path": [
            "login"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Validate status code is 400 for malformed JSON in login",
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get Profile Unauthorized",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{apiUrl}}/profile",
          "host": [
            "{{apiUrl}}"
          ],
          "path": [
            "profile"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Validate status code is 401 for unauthorized access",
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Get Profile Authorized",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwtToken}}"
          }
        ],
        "url": {
          "raw": "{{apiUrl}}/profile",
          "host": [
            "{{apiUrl}}"
          ],
          "path": [
            "profile"
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "// Validate status code is 200 for authorized profile access",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Parse the response and validate the email matches the registered email",
              "var jsonData = pm.response.json();",
              "pm.test(\"Profile email matches registered email\", function () {",
              "    pm.expect(jsonData.email).to.eql(pm.environment.get(\"registeredEmail\"));",
              "});"
            ]
          }
        }
      ]
    }
  ]
}
